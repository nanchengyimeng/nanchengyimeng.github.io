<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【docker】docker-composer</title>
    <url>/2023/09/22/%E3%80%90docker%E3%80%91docker-composer/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>后端</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>【计算机网络】一、计算机网络体系结构</title>
    <url>/2023/05/01/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E3%80%91%E4%B8%80%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h3 id="一、计算机网络概述"><a href="#一、计算机网络概述" class="headerlink" title="一、计算机网络概述"></a>一、计算机网络概述</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h4><h5 id="1-1网络"><a href="#1-1网络" class="headerlink" title="1.1网络"></a>1.1网络</h5><ul>
<li><p>网络</p>
<blockquote>
<p>网状的东西或网状的系统，蜘蛛网、计算机网络。</p>
</blockquote>
</li>
<li><p>计算机网络</p>
<blockquote>
<p>将<strong>分散的</strong>、<strong>具有独立功能</strong>的计算机系统，通过<strong>通信设备与线路</strong>连接，由功能完善的软件，实现<strong>资源共享</strong>和<strong>信息传递</strong>的系统。</p>
</blockquote>
</li>
</ul>
<h4 id="2-组成"><a href="#2-组成" class="headerlink" title="2. 组成"></a>2. 组成</h4><h5 id="2-1-组成部分"><a href="#2-1-组成部分" class="headerlink" title="2.1 组成部分"></a>2.1 组成部分</h5><ul>
<li><p>硬件</p>
<blockquote>
<p>硬件通常只各种网络设备，如路由器，交换机，服务器。</p>
</blockquote>
</li>
<li><p>软件</p>
<blockquote>
<p>提供一些特定服务的应用程序，如QQ，B站。</p>
</blockquote>
</li>
<li><p>协议</p>
<blockquote>
<p>硬件与硬件直接交换数据的格式约定，如TCP&#x2F;IP，UDP，HTTP。</p>
</blockquote>
</li>
</ul>
<h5 id="2-2-工作方式"><a href="#2-2-工作方式" class="headerlink" title="2.2 工作方式"></a>2.2 工作方式</h5><ul>
<li><p>边缘部分</p>
<ul>
<li>C&#x2F;S方式（客户端&#x2F;服务端）</li>
</ul>
<blockquote>
<p>例如：微信发送消息，发送消息的手机就可以称为客户端，服务器便是服务端，而接受消息的手机就也是客户端。</p>
</blockquote>
<ul>
<li>B&#x2F;S方式（浏览器&#x2F;服务端）</li>
</ul>
<blockquote>
<p>我们在浏览器看B站就是一个很好的交互例子.</p>
</blockquote>
<ul>
<li>P2P方式（端对端）</li>
</ul>
<blockquote>
<p>P2P经常被用在文件传输，熟知的是磁力链接下载。P2P允许将一个客户端同时作为服务端使用，A用户下载了一份文件，B用户在下载时，允许从A用户那里下载，而不用直接访问服务器。</p>
</blockquote>
<ul>
<li>核心部分</li>
</ul>
<blockquote>
<p>进程与进程、端到端通信</p>
</blockquote>
</li>
</ul>
<h4 id="3-功能"><a href="#3-功能" class="headerlink" title="3. 功能"></a>3. 功能</h4><ul>
<li>数据通信<blockquote>
<p>多个设备之间互相传递消息，如发QQ消息、接口调用。</p>
</blockquote>
</li>
<li>资源共享<blockquote>
<p>文件下载</p>
</blockquote>
</li>
<li>分布式处理<blockquote>
<p>多个计算机承担同一个工作任务</p>
</blockquote>
</li>
</ul>
<h4 id="4-分类"><a href="#4-分类" class="headerlink" title="4. 分类"></a>4. 分类</h4><ul>
<li><p>按分布范围</p>
<ul>
<li>广域网WAN</li>
<li>城域网MAN</li>
<li>局域网LAN</li>
<li>个人区域网PAN</li>
</ul>
</li>
<li><p>按使用者</p>
<ul>
<li>公用网：中国电信、中国移动</li>
<li>专用网：军队、政府机关使用</li>
</ul>
</li>
<li><p>按交换技术</p>
<ul>
<li>电路交换</li>
</ul>
<blockquote>
<p>例如打电话，A打电话给B，在建立连接后，其他人无法使用该连接。</p>
</blockquote>
<ul>
<li>报文交换</li>
</ul>
<blockquote>
<p>将整段报文进行发送。</p>
</blockquote>
<ul>
<li>分组交换</li>
</ul>
<blockquote>
<p>将报文切片分组，将数据存储，并转发到下一个路由。</p>
</blockquote>
</li>
<li><p>按拓扑结构</p>
<ul>
<li>总线型</li>
<li>星型</li>
<li>环型</li>
<li>网状型</li>
</ul>
</li>
<li><p>按传输技术<br>- 广播式网络<br><br>&gt; 共享公共通信信道<br><br>- 点对点网络<br><br>&gt; 使用分组存储转发和路由选择机制，由一端发送到另一端，其他人不会收到消息。</p>
</li>
</ul>
<h4 id="5-性能指标"><a href="#5-性能指标" class="headerlink" title="5. 性能指标"></a>5. 性能指标</h4><ul>
<li>速率</li>
</ul>
<blockquote>
<p>速率即数据率或称数据传输率或比特率。<br>单位：b&#x2F;s，kb&#x2F;s, Mb&#x2F;s, Gb&#x2F;s, Tb&#x2F;s 。<br>速率换算单位是10^3。</p>
</blockquote>
<ul>
<li>吞吐量</li>
</ul>
<blockquote>
<p>表示在单位时间内通过某个网络的数据量。</p>
</blockquote>
<ul>
<li>时延</li>
</ul>
<blockquote>
<p>指数据（报文&#x2F;分组&#x2F;比特流）从网络的一端传送到另一端所需的时间。也叫延迟或迟延，是描述时间的性能指标。单位：s</p>
</blockquote>
<ul>
<li>往返时延RTT</li>
</ul>
<blockquote>
<p>从发送方发送数据开始，到发送方收到接收方的确认，总共经历的时延。</p>
</blockquote>
<ul>
<li>利用率</li>
</ul>
<p><img src="/2023/05/01/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E3%80%91%E4%B8%80%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/liyonglv.png"></p>
<h3 id="二、体系结构-参考模型"><a href="#二、体系结构-参考模型" class="headerlink" title="二、体系结构&amp;参考模型"></a>二、体系结构&amp;参考模型</h3><h4 id="1-分层结构"><a href="#1-分层结构" class="headerlink" title="1. 分层结构"></a>1. 分层结构</h4><h4 id="2-协议、接口、服务"><a href="#2-协议、接口、服务" class="headerlink" title="2. 协议、接口、服务"></a>2. 协议、接口、服务</h4><h4 id="3-ISO-OSI模型"><a href="#3-ISO-OSI模型" class="headerlink" title="3. ISO&#x2F;OSI模型"></a>3. ISO&#x2F;OSI模型</h4><h4 id="4-TCP-IP模型"><a href="#4-TCP-IP模型" class="headerlink" title="4. TCP&#x2F;IP模型"></a>4. TCP&#x2F;IP模型</h4>]]></content>
      <categories>
        <category>后端</category>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>docker常用容器搭建命令</title>
    <url>/2023/04/01/%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%AE%B9%E5%99%A8%E6%90%AD%E5%BB%BA%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<blockquote>
<p>该文章只为了记录命令，用于常规开发使用，不讲解参数含义。</p>
</blockquote>
<h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=mengdan --network=mengdan -d mysql:latest</span><br></pre></td></tr></table></figure>

<h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis -d --network=mengdan redis:latest redis-server</span><br></pre></td></tr></table></figure>

<h3 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name etcd-server --network mengdan --publish 2379:2379 --publish 2380:2380 --<span class="built_in">env</span> ALLOW_NONE_AUTHENTICATION=<span class="built_in">yes</span> --<span class="built_in">env</span> ETCD_ADVERTISE_CLIENT_URLS=http://127.0.0.1:2379 bitnami/etcd:latest</span><br><span class="line">docker run -it --<span class="built_in">rm</span> --network mengdan --<span class="built_in">env</span> ALLOW_NONE_AUTHENTICATION=<span class="built_in">yes</span> bitnami/etcd:latest etcdctl --endpoints http://127.0.0.1:2379 <span class="built_in">set</span> /message Hello</span><br></pre></td></tr></table></figure>

<h3 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq"></a>rabbitmq</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name rabbitmq-server -e  RABBITMQ_DEFAULT_USER=mengdan -e RABBITMQ_DEFAULT_PASS=mengdan -p 15672:15672 -p 5672:5672 --network mengdan --network-alias rabbitmq_server f2236</span><br></pre></td></tr></table></figure>

<h3 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d  -p 27017:27017 --network mengdan --network-alias mongo_server  --name mongodb -e MONGO_INITDB_ROOT_USERNAME=mengdan -e MONGO_INITDB_ROOT_PASSWORD=mengdan mongo</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>后端</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>【计组】计算机组成与原理</title>
    <url>/2024/02/18/%E3%80%90%E8%AE%A1%E7%BB%84%E3%80%91%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="一、计算机组成部分"><a href="#一、计算机组成部分" class="headerlink" title="一、计算机组成部分"></a>一、计算机组成部分</h2><h3 id="1、输入设备"><a href="#1、输入设备" class="headerlink" title="1、输入设备"></a>1、输入设备</h3><ul>
<li>所有能把外部信息传递给计算机的设备，统称为输入设备，包括且不限于鼠标、键盘、麦克风</li>
</ul>
<h3 id="2、输出设备"><a href="#2、输出设备" class="headerlink" title="2、输出设备"></a>2、输出设备</h3><ul>
<li>所有能把计算机处理结果展示出来的设备，统称为输出设备，包括且不限于显示器、投影仪、打印机、信号指示灯</li>
</ul>
<h3 id="3、存储器"><a href="#3、存储器" class="headerlink" title="3、存储器"></a>3、存储器</h3><p><img src="/2024/02/18/%E3%80%90%E8%AE%A1%E7%BB%84%E3%80%91%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E4%B8%8E%E5%8E%9F%E7%90%86/%E5%AD%98%E5%82%A8%E5%99%A8%E4%B8%8E%E5%AD%98%E5%82%A8%E5%8D%95%E5%85%83.png" alt=" "></p>
<ul>
<li><p>存储体：存储数据的地方，存储体中包含存储单元。存储单元是存储元的集合，每个存储元实际上是代表0&#x2F;1的电子元件。  </p>
</li>
<li><p>MDR：数据寄存器, 负责暂存 待存入\待读取 的数据  </p>
</li>
<li><p>MAR：地址寄存器，指出读写存储体的哪一个存储单元</p>
</li>
</ul>
<blockquote>
<p>注：现代计算机中，MDR和MAR通常移入CPU中<br>注：如图1.2所示，一个存储单元中包含6个存储元，所以存储字长为6</p>
</blockquote>
<h3 id="4、运算器"><a href="#4、运算器" class="headerlink" title="4、运算器"></a>4、运算器</h3><ul>
<li><p>ACC：累加计数器，存放操作数或运算结果，包含被加数、被减数、被除数、乘积高位、余数</p>
</li>
<li><p>MQ：乘商寄存器，存放操作数或运算结果，包含乘数、乘积低位、商</p>
</li>
<li><p>X：通用寄存器：存放操作数，包含加数、减数、被乘数、除数</p>
</li>
<li><p>ALU：算数逻辑单元，封装了复杂电路实现的算术运算和逻辑运算</p>
</li>
</ul>
<blockquote>
<p>乘积高位和乘积低位：乘积高位和乘积低位是两个数相乘后，结果的最高位数字和最低位数字。<br>以十进制为例，百位就是十位的高位，十位是百位的低位。两个16位数相乘，结果可能会有32位，那左半部分的16位就是乘积高位，存储到ACC中，右半部分的16位就是乘积低位，存储到MQ中</p>
</blockquote>
<h3 id="5、控制器"><a href="#5、控制器" class="headerlink" title="5、控制器"></a>5、控制器</h3><ul>
<li><p>IR：指令寄存器，保存当前执行的指令</p>
</li>
<li><p>PC：程序计数器，记录下一条指令位置，初始为0，IR每读取执行一次，PC加1</p>
</li>
<li><p>CU：控制单元，分析和执行指令</p>
</li>
</ul>
<blockquote>
<p>一般将控制器和运算器放在一起，称为CPU。</p>
</blockquote>
]]></content>
      <categories>
        <category>计算机组成</category>
      </categories>
      <tags>
        <tag>计算机组成</tag>
      </tags>
  </entry>
</search>
